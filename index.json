[{"content":"Structural subtyping in Python can be achieved using typing.Protocol and the @runtime_checkable decorator.\nRather than employing abc.ABC for nominal subclasses, a cleaner approach involves combining @typing.runtime_checkable with typing.Protocol.\nBy decorating a protocol class with @runtime_checkable, it becomes a runtime protocol which is amenable to isinstance() and issubclass(). Without @runtime_checkable, attempting isinstance() and issubclass() operations will result in a TypeError. Note that, for performance considerations, using hasattr() tends to be notably faster than isinstance() in these cases.\nStructural subtyping is common to languages like Golang and C#, and it sidesteps issues associated with inheritance by favoring compositions.\nFor a comprehensive understanding and further details, refer to the Python Enhancement Proposal (PEP) 544 available at https://peps.python.org/pep-0544/.\nThis article is inspired by Hynek Schlawack\u0026rsquo;s talk: Subclassing, Composition, Python, and You.\n","permalink":"https://micaleel.github.io/posts/structural-subtyping/","summary":"Structural subtyping in Python can be achieved using typing.Protocol and the @runtime_checkable decorator.\nRather than employing abc.ABC for nominal subclasses, a cleaner approach involves combining @typing.runtime_checkable with typing.Protocol.\nBy decorating a protocol class with @runtime_checkable, it becomes a runtime protocol which is amenable to isinstance() and issubclass(). Without @runtime_checkable, attempting isinstance() and issubclass() operations will result in a TypeError. Note that, for performance considerations, using hasattr() tends to be notably faster than isinstance() in these cases.","title":"Structural Subtyping in Python"}]